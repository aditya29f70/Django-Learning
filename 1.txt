MVT -> model, view , template --> design pattern --> django follow that pattern

model= Data access layer
template= presentation layer
view -- businees logic

django documentation --> https://www.djangoproject.com/ vvimportant
repo --> https://github.com/Traversy-Media/StudyBud

django-admin gives all the fn can use with that

`django-admin startproject  project-name`

in StudyBud folder go and run --> `python manage.py runserver`

with running the server, do ==> python manage.py startapp
--> it will make a new file and i want to that our app would i
i has been generted so go --> setting.py --> go --> installed_app
and add put --> 'base.apps.BaseConfig'
and go app.py in 'base' and take 'BaseConfig(AppConfig)' class --> this is going to connect to the app directly

* we are now working on urls.py make use 'request' obj in a fn
the http request will be come through this 

so make a urls.py file in base also so that will be you app urls file
and that one urls.py file which in studybud --> root directly urls file

Note: studybud would we our main folder

# now adding templates so make template folder and tell settings.py
template that we have new templates folder

# inheritance templates by using % include 'navbar.html' %

# so rapping the content we will be using --> {% block content %} {$ endblock $}

# so you don't need to specify url as name basis eg--> /room/<str:pk> <== that is room.id
instead you can use --> "url 'name_of_url' room.id"

# now we are going to work on database;

# for getting default database which django give after 
giving that command --> python manage.py migrate

* when ever you add model to the database  so first thing you need to do
make migration --> python manage.py makemirations
a new migration file will be made in the migration folder
so you will be often doing that makemigration (that will create new migation)
and (python manage.py migrate) -> it will apply those made model (update)

# now if you want to see those data base entries you have to access that django by default 
admin page --> for that you have to make superuser
--> python manage.py createsuperuser

after login in the admin page you will see all the authentically made models
but if you want to see your model what ever you made in you app you have to import those in admin.py
and have to tell that we also want these models in admin page
--> 'admin.site.register(model_name_that_you_want_to_specify)'
now we can use these model in views.py (have to import that models from which you want to make query)
--> you can do query by using model manager --> 'objects'
Room.objects.all()
this is how you can make query in the database --> 
queryset= ModelName.objects.all() or .get(), 
.filter(), .exclude()

queryItem= ModelName.objects.get(attribute= 'value')

queryset= ModelsName.object.filter(attribute='value')
                          .filter(attribute_startswith= 'value')
                          .filter(attribute_constrain= 'value')
                          .filter(attribute_icontains= 'value')
                          .filter(attribute_gt= 'value') (gt --> greater than)
                          .fiter(attribute-gte= 'value')
                          .fiter(attribute-lt= 'value')
                          .fiter(attribute-lte= 'value')

queryset= Project.object.filter(title='first Project').order_by('value1', '-value')

item= ModelName.objects.create(attribute= 'value)

# now need to make some more models 


## now we are going to work on crud operation
-> when ever sending the post request in django we need to passin 
this '''csrf_token''' --> {% csrf_token %}

if i want order the room in some order so you have to define ordering , where you define the models
by --> class Meta:
        ordering = ['update', 'created'] --> it will order first according the updated time in defauld asscending order mean
        first updated row come last so you have to reverse the order by using --> '-updated'


note: if you don't put anything action in form will be post(if method is post) to the same endpt in which this template came


# now we are going to make the header bar(where i search anything topic, room description , etc )  
through that user can easly get there room
--> go nav bar --> and form a search bar

# now how you can make dynamic search here we are only searching on the basis of topic name
if we add thing like name__icontains also in the filter thing in home room selection
by , seperated and also more contrain on there room attribute so it will take those room which follow all these contrain

but we have a 'Q' (from db.models)  look up method which allows us to use 'or' 'and' like statement passility
so ` django.db.models import Q` so for and --> & and for or --> |

we also want room count here (like total rooms found near you )
so for that we manually use the len fn in the home view on rooms but there
is a fast fn called --> `.count()`

##### authentication:::
we will build --> user login from , user resistation form , logout functionality
--> django has by default session base authentication
same has django admin page panel, when you will use postgre sql you will see that 
session table , (go setting.py there also you will see in the installed_app
session is installed)


so when ever a user logind in this send to the backend , and session token is created
and that session stored info about that user (go devtool> application you will see the cookies)
so this is by defauld django made now it's time to make similar authentication uesr login page
(our own authentication system)
1. make a template --> registration login --> login_register.html
note; django has there buildin registeration form and also login form what i have to do is we have to make ller
now add there functionality in view page with name loginPage (note: don't take name only login bz there is a fn name login which will conflict if you take this name)

### for error handling we gonna user ''django flash messages'' search it

## know i want to restrict some pages to user see so we gonna use
`django.contrib.auth.decorater import login_required`
like if i put @login_required(login_required= 'give_the_redirect_page_what_ever_redirect_page_you_want') at any of the view fn basically we are restricting it


# now want to also add that only those who made the room can change there own room , if 
they gonna update any other room we gonna give i httpRespone (`from django.http import HttpRespone`)